{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"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","sourcesContent":["import { Plugin } from '@capacitor/core'\n\nexport interface BarkoderPlugin extends Plugin {\n\n  // - Initialize the BarkoderView\n\n  initialize(options: {\n    width: number,\n    height: number,\n    x: number,\n    y: number,\n   }): Promise<any>;\n\n  // - Register with license key\n\n  registerWithLicenseKey(options: { \n    licenseKey: string \n  }): Promise<any>;\n\n  // - Setters\n\n  setZoomFactor(options: { \n    value: number\n   }): Promise<any>;\n\n  setFlashEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n  startCamera(): Promise<any>;\n  startScanning(): Promise<any>;\n  stopScanning(): Promise<any>;\n  pauseScanning(): Promise<any>;\n\n  setLocationLineColor(options: { \n    value: string\n   }): Promise<any>;\n\n   setLocationLineWidth(options: { \n    value: number\n   }): Promise<any>;\n\n   setRoiLineColor(options: { \n    value: string\n   }): Promise<any>;\n\n   setRoiLineWidth(options: { \n    value: number\n   }): Promise<any>;\n\n   setRoiOverlayBackgroundColor(options: { \n    value: string\n   }): Promise<any>;\n\n   setCloseSessionOnResultEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setImageResultEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setLocationInImageResultEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setRegionOfInterest(options: {\n    left: number,\n    top: number,\n    width: number,\n    height: number,\n   }): Promise<any>;\n\n   setThreadsLimit(options: { \n    value: number\n   }): Promise<any>;\n\n   setLocationInPreviewEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setPinchToZoomEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setRegionOfInterestVisible(options: { \n    value: boolean\n   }): Promise<any>;\n\n   setBarkoderResolution(options: { \n    value: number\n   }): Promise<any>;\n\n   setBeepOnSuccessEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setVibrateOnSuccessEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   showLogMessages(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setBarcodeTypeLengthRange(options: {\n    type: number,\n    min: number,\n    max: number,\n   }): Promise<any>;\n\n   setEncodingCharacterSet(options: { \n    value: string \n  }): Promise<any>;\n   \n  setDecodingSpeed(options: { \n    value: number\n   }): Promise<any>;\n\n   setFormattingType(options: { \n    value: number\n   }): Promise<any>;\n\n  setCode11ChecksumType(options: { \n    value: number\n   }): Promise<any>;\n   \n   setMsiChecksumType(options: { \n    value: number\n   }): Promise<any>;\n\n   setCode39ChecksumType(options: { \n    value: number\n   }): Promise<any>;\n\n   setBarcodeTypeEnabled(options: {\n    type: number,\n    enabled: boolean,\n   }): Promise<any>;\n\n   setMulticodeCachingEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setMulticodeCachingDuration(options: { \n    value: number\n   }): Promise<any>;\n\n   setMaximumResultsCount(options: { \n    value: number\n   }): Promise<any>;\n\n   setBarcodeThumbnailOnResultEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setDuplicatesDelayMs(options: { \n    value: number\n   }): Promise<any>;\n\n   setThresholdBetweenDuplicatesScans(options: { \n    value: number\n   }): Promise<any>;\n\n   setUpcEanDeblurEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setMisshaped1DEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setEnableVINRestrictions(options: { \n    value: boolean\n   }): Promise<any>;\n\n   setDatamatrixDpmModeEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   configureBarkoder(options: { \n    barkoderConfig: BarkoderConfig,\n  }): Promise<any>;\n\n   // - Getters\n\n   isFlashAvailable(): Promise<any>;\n   isCloseSessionOnResultEnabled(): Promise<any>;\n   isImageResultEnabled(): Promise<any>;\n   isLocationInImageResultEnabled(): Promise<any>;\n   isLocationInPreviewEnabled(): Promise<any>;\n   isPinchToZoomEnabled(): Promise<any>;\n   isRegionOfInterestVisible(): Promise<any>;\n   isBeepOnSuccessEnabled(): Promise<any>;\n   isVibrateOnSuccessEnabled(): Promise<any>;\n   getVersion(): Promise<any>;\n   getLocationLineColorHex(): Promise<any>;\n   getRoiLineColorHex(): Promise<any>;\n   getRoiOverlayBackgroundColorHex(): Promise<any>;\n   getMaxZoomFactor(): Promise<any>;\n   getLocationLineWidth(): Promise<any>;\n   getRoiLineWidth(): Promise<any>;\n   getRegionOfInterest(): Promise<any>;\n\n   getBarcodeTypeLengthRange(options: { \n    type: number\n   }): Promise<any>;\n\n   getMsiChecksumType(): Promise<any>;\n   getCode39ChecksumType(): Promise<any>;\n   getCode11ChecksumType(): Promise<any>;\n   getEncodingCharacterSet(): Promise<any>;\n   getDecodingSpeed(): Promise<any>;\n   getFormattingType(): Promise<any>;\n   getThreadsLimit(): Promise<any>;\n   getMaximumResultsCount(): Promise<any>;\n   getDuplicatesDelayMs(): Promise<any>;\n\n   isBarcodeTypeEnabled(options: { \n    type: number\n   }): Promise<any>;\n\n   getMulticodeCachingEnabled(): Promise<any>;\n   getMulticodeCachingDuration(): Promise<any>;\n   isUpcEanDeblurEnabled(): Promise<any>;\n   isMisshaped1DEnabled(): Promise<any>;\n   isBarcodeThumbnailOnResultEnabled(): Promise<any>;\n   getThresholdBetweenDuplicatesScans(): Promise<any>;\n   isVINRestrictionsEnabled(): Promise<any>;\n   getBarkoderResolution(): Promise<any>;\n\n}\n\nexport enum DecodingSpeed { \n  fast, \n  normal, \n  slow \n}\n\nexport enum FormattingType { \n  disabled, \n  automatic, \n  gs1, \n  aamva \n}\n\nexport enum MsiChecksumType {\n  disabled,\n  mod10,\n  mod11,\n  mod1010,\n  mod1110,\n  mod11IBM,\n  mod1110IBM\n}\n\nexport enum Code39ChecksumType { \n  disabled, \n  enabled \n}\n\nexport enum Code11ChecksumType { \n  disabled, \n  single, \n  double \n}\n\nexport enum BarkoderResolution { \n  normal, \n  high \n}\n\nexport enum BarcodeType {\n  aztec,\n  aztecCompact,\n  qr,\n  qrMicro,\n  code128,\n  code93,\n  code39,\n  codabar,\n  code11,\n  msi,\n  upcA,\n  upcE,\n  upcE1,\n  ean13,\n  ean8,\n  pdf417,\n  pdf417Micro,\n  datamatrix,\n  code25,\n  interleaved25,\n  itf14,\n  iata25,\n  matrix25,\n  datalogic25,\n  coop25,\n  code32,\n  telepen,\n  dotcode\n}\n\nexport class BarkoderConfig {\n  locationLineColor?: string;\n  locationLineWidth?: number;\n  roiLineColor?: string;\n  roiLineWidth?: number;\n  roiOverlayBackgroundColor?: string;\n  closeSessionOnResultEnabled?: boolean;\n  imageResultEnabled?: boolean;\n  locationInImageResultEnabled?: boolean;\n  locationInPreviewEnabled?: boolean;\n  pinchToZoomEnabled?: boolean;\n  regionOfInterestVisible?: boolean;\n  barkoderResolution?: BarkoderResolution;\n  beepOnSuccessEnabled?: boolean;\n  vibrateOnSuccessEnabled?: boolean;\n  decoder?: DekoderConfig;\n\n  constructor(config: Partial<BarkoderConfig>) {\n    Object.assign(this, config);\n  }\n  \n}\n\nexport class DekoderConfig {\n  aztec?: BarcodeConfig;\n  aztecCompact?: BarcodeConfig;\n  qr?: BarcodeConfig;\n  qrMicro?: BarcodeConfig;\n  code128?: BarcodeConfigWithLength;\n  code93?: BarcodeConfigWithLength;\n  code39?: Code39BarcodeConfig;\n  codabar?: BarcodeConfigWithLength;\n  code11?: Code11BarcodeConfig;\n  msi?: MSIBarcodeConfig;\n  upcA?: BarcodeConfig;\n  upcE?: BarcodeConfig;\n  upcE1?: BarcodeConfig;\n  ean13?: BarcodeConfig;\n  ean8?: BarcodeConfig;\n  pdf417?: BarcodeConfig;\n  pdf417Micro?: BarcodeConfig;\n  datamatrix?: DatamatrixBarcodeConfig;\n  code25?: BarcodeConfig;\n  interleaved25?: BarcodeConfig;\n  itf14?: BarcodeConfig;\n  iata25?: BarcodeConfig;\n  matrix25?: BarcodeConfig;\n  datalogic25?: BarcodeConfig;\n  coop25?: BarcodeConfig;\n  code32?: BarcodeConfig;\n  telepen?: BarcodeConfig;\n  dotcode?: BarcodeConfig;\n  general?: GeneralSettings;\n\n  constructor(config: Partial<DekoderConfig>) {\n    Object.assign(this, config);\n  }\n\n}\n\nexport class BarcodeConfig {\n  enabled?: boolean;\n\n  constructor(config: Partial<BarcodeConfig>) {\n    Object.assign(this, config);\n  }\n\n}\n\nexport class BarcodeConfigWithLength {\n  enabled?: boolean;\n  minLength?: number;\n  maxLength?: number;\n\n  constructor(config: Partial<BarcodeConfigWithLength>) {\n    Object.assign(this, config);\n  }\n\n  setLengthRange(minLength: number, maxLength: number) {\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n  }\n}\n\nexport class MSIBarcodeConfig {\n  enabled?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  checksum?: MsiChecksumType;\n\n  constructor(config: Partial<MSIBarcodeConfig>) {\n    Object.assign(this, config);\n  }\n\n  setLengthRange(minLength: number, maxLength: number) {\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n  }\n}\n\nexport class Code39BarcodeConfig {\n  enabled?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  checksum?: Code39ChecksumType;\n\n  constructor(config: Partial<Code39BarcodeConfig>) {\n    Object.assign(this, config);\n  }\n\n  setLengthRange(minLength: number, maxLength: number) {\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n  }\n}\n\nexport class Code11BarcodeConfig {\n  enabled?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  checksum?: Code11ChecksumType;\n\n  constructor(config: Partial<Code11BarcodeConfig>) {\n    Object.assign(this, config);\n  }\n\n  setLengthRange(minLength: number, maxLength: number) {\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n  }\n}\n\nexport class DatamatrixBarcodeConfig {\n  enabled?: boolean;\n  dpmMode?: number;\n  minLength?: number;\n  maxLength?: number;\n\n  constructor(config: Partial<DatamatrixBarcodeConfig>) {\n    Object.assign(this, config);\n  }\n\n  setLengthRange(minLength: number, maxLength: number) {\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n  }\n}\n\nexport class GeneralSettings {\n  threadsLimit?: number;\n  decodingSpeed?: DecodingSpeed;\n  roiX?: number;\n  roiY?: number;\n  roiWidth?: number;\n  roiHeight?: number;\n  formattingType?: FormattingType;\n  encodingCharacterSet?: string;\n  maximumResultsCount?: number;\n  duplicatesDelayMs?: number;\n  multicodeCachingDuration?: number;\n  multicodeCachingEnabled?: boolean;\n  upcEanDeblur?: number;\n  enableMisshaped1D? : number;\n\n  constructor(config: Partial<GeneralSettings>) {\n    Object.assign(this, config);\n  }\n\n   setROI(x: number, y: number, width: number, height: number): void {\n    this.roiX = x;\n    this.roiY = y;\n    this.roiWidth = width;\n    this.roiHeight = height;\n  }\n  \n}"]}