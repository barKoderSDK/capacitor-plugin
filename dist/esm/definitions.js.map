{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"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","sourcesContent":["import { Plugin } from '@capacitor/core';\n\nexport interface BarkoderPlugin extends Plugin {\n  // - Initialize the BarkoderView\n\n  initialize(options: {\n    width: number;\n    height: number;\n    x: number;\n    y: number;\n  }): Promise<any>;\n\n  // - Register with license key\n\n  registerWithLicenseKey(options: { licenseKey: string }): Promise<any>;\n\n  // - Setters\n\n  /**\n   * Sets the zoom factor for the device's camera, adjusting the level of zoom during barcode scanning\n   */\n  setZoomFactor(options: { value: number }): Promise<any>;\n\n  /**\n   * Enables or disables the device's flash (torch) for illumination during barcode scanning\n   */\n  setFlashEnabled(options: { enabled: boolean }): Promise<any>;\n\n  startCamera(): Promise<any>;\n\n  /**\n   * Initiates the barcode scanning process, allowing the application to detect and decode barcodes from the device's camera feed\n   */\n  startScanning(): Promise<any>;\n\n  /**\n   * Halts the barcode scanning process, stopping the camera from capturing and processing barcode information\n   */\n  stopScanning(): Promise<any>;\n\n  /**\n   * Temporarily suspends the barcode scanning process, pausing the camera feed without completely stopping the scanning session\n   */\n  pauseScanning(): Promise<any>;\n\n  /**\n * Scan barcodes from base64 string image\n */\n  scanImage(options: { base64: string }): Promise<any>;\n\n  /**\n   * Sets the color of the lines used to indicate the location of detected barcodes on the camera feed\n   */\n  setLocationLineColor(options: { value: string }): Promise<any>;\n\n  /**\n   * Sets the width of the lines indicating the location of detected barcodes on the camera feed\n   */\n  setLocationLineWidth(options: { value: number }): Promise<any>;\n\n  /**\n   * Sets the color of the lines outlining the Region of Interest (ROI) for barcode scanning on the camera feed\n   */\n  setRoiLineColor(options: { value: string }): Promise<any>;\n\n  /**\n   * Sets the width of the lines outlining the Region of Interest (ROI) for barcode scanning on the camera feed\n   */\n  setRoiLineWidth(options: { value: number }): Promise<any>;\n\n  /**\n   * Sets the background color of the overlay within the Region of Interest (ROI) for barcode scanning on the camera feed\n   */\n  setRoiOverlayBackgroundColor(options: { value: string }): Promise<any>;\n\n  /**\n   * Enables or disables the automatic closing of the scanning session upon detecting a barcode result\n   */\n  setCloseSessionOnResultEnabled(options: { enabled: boolean }): Promise<any>;\n\n  /**\n   * Enables or disables the capturing and processing of image data when a barcode is successfully detected\n   */\n  setImageResultEnabled(options: { enabled: boolean }): Promise<any>;\n\n  /**\n   * Enables or disables the inclusion of barcode location information within the image data result\n   */\n  setLocationInImageResultEnabled(options: { enabled: boolean }): Promise<any>;\n\n  /**\n   * Defines the Region of Interest (ROI) on the camera preview for barcode scanning, specifying an area where the application focuses on detecting barcodes\n   */\n  setRegionOfInterest(options: {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n  }): Promise<any>;\n\n  /**\n   * Sets the threads limit\n   */\n  setThreadsLimit(options: { value: number }): Promise<any>;\n\n  /**\n   * Enables or disables the display of barcode location information on the camera preview\n   */\n  setLocationInPreviewEnabled(options: { enabled: boolean }): Promise<any>;\n\n  /**\n   * Enables or disables the pinch-to-zoom feature for adjusting the zoom level during barcode scanning\n   */\n  setPinchToZoomEnabled(options: { enabled: boolean }): Promise<any>;\n\n  /**\n   * Sets the visibility of the Region of Interest (ROI) on the camera preview\n   */\n  setRegionOfInterestVisible(options: { value: boolean }): Promise<any>;\n\n  /**\n   * Sets the resolution for barcode scanning\n   */\n  setBarkoderResolution(options: { value: number }): Promise<any>;\n\n  /**\n   * Enables or disables the audible beep sound upon successfully decoding a barcode\n   */\n  setBeepOnSuccessEnabled(options: { enabled: boolean }): Promise<any>;\n\n  /**\n   * Enables or disables the device vibration upon successfully decoding a barcode.\n   */\n  setVibrateOnSuccessEnabled(options: { enabled: boolean }): Promise<any>;\n\n  showLogMessages(options: { enabled: boolean }): Promise<any>;\n\n  /**\n   * Sets the length range for the specified barcode type\n   */\n  setBarcodeTypeLengthRange(options: {\n    type: number;\n    min: number;\n    max: number;\n  }): Promise<any>;\n\n  /**\n   * Sets the encoding character set for barcode scanning\n   */\n  setEncodingCharacterSet(options: { value: string }): Promise<any>;\n\n  /**\n   * Sets the decoding speed for barcode scanning\n   */\n  setDecodingSpeed(options: { value: number }): Promise<any>;\n\n  /**\n   * Sets the formatting type for barcode scanning\n   */\n  setFormattingType(options: { value: number }): Promise<any>;\n\n  /**\n   * Sets the Code11 checksum type\n   */\n  setCode11ChecksumType(options: { value: number }): Promise<any>;\n\n  /**\n   * Sets the MSI checksum type\n   */\n  setMsiChecksumType(options: { value: number }): Promise<any>;\n\n  /**\n   * Sets the Code39 checksum type\n   */\n  setCode39ChecksumType(options: { value: number }): Promise<any>;\n\n  /**\n   * Sets whether a specific barcode type is enabled\n   */\n  setBarcodeTypeEnabled(options: {\n    type: number;\n    enabled: boolean;\n  }): Promise<any>;\n\n  /**\n   * Sets whether multi-code caching is enabled\n   */\n  setMulticodeCachingEnabled(options: { enabled: boolean }): Promise<any>;\n\n  /**\n   * Sets the caching duration (in milliseconds) for multi-code results\n   */\n  setMulticodeCachingDuration(options: { value: number }): Promise<any>;\n\n  /**\n   * Sets the maximum number of results to be returned from barcode scanning\n   */\n  setMaximumResultsCount(options: { value: number }): Promise<any>;\n\n  /**\n   * A boolean indicating whether to enable barcode thumbnail on result.\n   */\n  setBarcodeThumbnailOnResultEnabled(options: {\n    enabled: boolean;\n  }): Promise<any>;\n\n  /**\n   * Sets the delay in milliseconds for considering duplicate barcodes during scanning\n   */\n  setDuplicatesDelayMs(options: { value: number }): Promise<any>;\n\n  /**\n   * Sets the threshold between duplicate scans\n   */\n  setThresholdBetweenDuplicatesScans(options: { value: number }): Promise<any>;\n\n  /**\n   * Sets whether the deblurring feature for UPC/EAN barcodes is enabled\n   */\n  setUpcEanDeblurEnabled(options: { enabled: boolean }): Promise<any>;\n\n  /**\n   * Sets whether the detection of misshaped 1D barcodes is enabled\n   */\n  setMisshaped1DEnabled(options: { enabled: boolean }): Promise<any>;\n\n  /**\n   * Sets whether Vehicle Identification Number (VIN) restrictions are enabled\n   */\n  setEnableVINRestrictions(options: { value: boolean }): Promise<any>;\n\n  /**\n   * Sets whether the Direct Part Marking (DPM) mode for Datamatrix barcodes is enabled.\n   */\n  setDatamatrixDpmModeEnabled(options: { enabled: boolean }): Promise<any>;\n\n  /**\n * Sets whether the Direct Part Marking (DPM) mode for QR barcodes is enabled.\n */\n  setQrDpmModeEnabled(options: { enabled: boolean }): Promise<any>;\n\n  /**\n * Sets whether the Direct Part Marking (DPM) mode for QR Micro barcodes is enabled.\n */\n  setQrMicroDpmModeEnabled(options: { enabled: boolean }): Promise<any>;\n\n  /**\n   * Configures the Barkoder functionality based on the provided configuration\n   */\n  configureBarkoder(options: { barkoderConfig: BarkoderConfig }): Promise<any>;\n\n  /**\n*  Sets whether Master checksum should be requiered when scanning ID Documents\n*/\n  setIdDocumentMasterChecksumEnabled(options: { enabled: boolean }): Promise<any>;\n\n  /**\n * Sets whether the UPC-E barcodes should be expanded to UPC-A format\n */\n  setUPCEexpandToUPCA(options: { value: boolean }): Promise<any>;\n\n  /**\n   * Sets whether the UPC-E1 barcodes should be expanded to UPC-A format\n   */\n  setUPCE1expandToUPCA(options: { value: boolean }): Promise<any>;\n\n  /**\n   * Sets a custom option with a string option and integer value\n   */\n  setCustomOption(options: {\n    option: string;\n    value: number;\n  }): Promise<any>;\n\n  /**\n   * Sets the color of the lines outlining the scanning indicator for barcode scanning on the camera feed\n   */\n  setScanningIndicatorColor(options: { value: string }): Promise<any>;\n\n  /**\n   * Sets the width of the scanning indicator for barcode scanning on the camera feed\n   */\n  setScanningIndicatorWidth(options: { value: number }): Promise<any>;\n\n  /**\n   * Sets the animation of the scanning indicator for barcode scanning on the camera feed\n   */\n  setScanningIndicatorAnimation(options: { value: number }): Promise<any>;\n\n  /**\n   * Sets the scanning indicator to be always shown on the camera feed\n   */\n  setScanningIndicatorAlwaysVisible(options: { value: boolean }): Promise<any>;\n\n    /**\n   * Sets the camera's exposure dynamically based on the provided intensity, cycling through predefined compensation values\n   */\n    setDynamicExposure(options: { value: number }): Promise<any>;\n\n      /**\n   * Set the camera to use the center of the viewfinder for focus and exposure\n   */\n    setCentricFocusAndExposure(options: { value: boolean }): Promise<any>;\n\n    /**\n   * Sets wheter Composite Mode should be enabled when scanning\n   */\n    setEnableComposite(options: { value: number }): Promise<any>;\n\n    /**\n   * Enable or disable video stabilization for smoother video capture\n   */\n    setVideoStabilization(options: { value: boolean }): Promise<any>;\n\n        /**\n   * Sets the camera to be used for scanning (back/front)\n   */\n    setCamera(options: { value: number }): Promise<any>;\n\n  // - Getters\n\n  /**\n   * Checks whether the device has a built-in flash (torch) that can be used for illumination during barcode scanning\n   */\n  isFlashAvailable(): Promise<any>;\n\n  /**\n   * Enables or disables the automatic closing of the scanning session upon detecting a barcode result\n   */\n  isCloseSessionOnResultEnabled(): Promise<any>;\n\n  /**\n   * Enables or disables the capturing and processing of image data when a barcode is successfully detected\n   */\n  isImageResultEnabled(): Promise<any>;\n\n  /**\n   * Enables or disables the inclusion of barcode location information within the image data result\n   */\n  isLocationInImageResultEnabled(): Promise<any>;\n\n  /**\n   * Checks if location in preview is enabled\n   */\n  isLocationInPreviewEnabled(): Promise<any>;\n\n  /**\n   * Checks if pinch to zoom is enabled\n   */\n  isPinchToZoomEnabled(): Promise<any>;\n\n  /**\n   * Checks if the region of interest (ROI) is visible\n   */\n  isRegionOfInterestVisible(): Promise<any>;\n\n  /**\n   * Retrieves the value indicating whether a beep sound is played on successful barcode scanning\n   */\n  isBeepOnSuccessEnabled(): Promise<any>;\n\n  /**\n   * Retrieves the value indicating whether vibration is enabled on successful barcode scanning\n   */\n  isVibrateOnSuccessEnabled(): Promise<any>;\n\n  /**\n   * Retrieves the version of the Barkoder library\n   */\n  getVersion(): Promise<any>;\n\n  /**\n   * Retrieves the hexadecimal color code representing the line color used to indicate the location of detected barcodes\n   */\n  getLocationLineColorHex(): Promise<any>;\n\n  /**\n   * Retrieves the hexadecimal color code representing the line color of the Region of Interest (ROI) on the camera preview\n   */\n  getRoiLineColorHex(): Promise<any>;\n\n  /**\n   * Retrieves the hexadecimal color code representing the background color of the overlay within the Region of Interest (ROI) on the camera preview\n   */\n  getRoiOverlayBackgroundColorHex(): Promise<any>;\n\n  /**\n   * Retrieves the maximum available zoom factor for the device's camera\n   */\n  getMaxZoomFactor(): Promise<any>;\n\n  /**\n   * Retrieves the current width setting for the lines indicating the location of detected barcodes on the camera feed\n   */\n  getLocationLineWidth(): Promise<any>;\n\n  /**\n   * Retrieves the current width setting for the lines outlining the Region of Interest (ROI) on the camera preview\n   */\n  getRoiLineWidth(): Promise<any>;\n\n  /**\n   * Retrieves the region of interest (ROI)\n   */\n  getRegionOfInterest(): Promise<any>;\n\n  /**\n   * Retrieves the length range of a specific barcode type\n   */\n  getBarcodeTypeLengthRange(options: { type: number }): Promise<any>;\n\n  /**\n   * Retrieves the MSI checksum type\n   */\n  getMsiChecksumType(): Promise<any>;\n\n  /**\n   * Retrieves the checksum type for Code 39 barcodes\n   */\n  getCode39ChecksumType(): Promise<any>;\n\n  /**\n   * Retrieves the Code11 checksum type\n   */\n  getCode11ChecksumType(): Promise<any>;\n\n  /**\n   * Retrieves the character set used for encoding barcode data\n   */\n  getEncodingCharacterSet(): Promise<any>;\n\n  /**\n   * Retrieves the current decoding speed setting for barcode scanning\n   */\n  getDecodingSpeed(): Promise<any>;\n\n  /**\n   * Retrieves the formatting type used for presenting decoded barcode data.\n   */\n  getFormattingType(): Promise<any>;\n\n  /**\n   * Retrieves the threads limit\n   */\n  getThreadsLimit(): Promise<any>;\n\n  /**\n   * Retrieves the maximum number of results to be returned from barcode scanning at once\n   */\n  getMaximumResultsCount(): Promise<any>;\n\n  /**\n   * Retrieves the delay in milliseconds for considering duplicate barcodes during scanning\n   */\n  getDuplicatesDelayMs(): Promise<any>;\n\n  /**\n   * Checks if a specific barcode type is enabled\n   */\n  isBarcodeTypeEnabled(options: { type: number }): Promise<any>;\n\n  /**\n   * Retrieves whether multi-code caching is enabled\n   */\n  getMulticodeCachingEnabled(): Promise<any>;\n\n  /**\n   * Retrieves the caching duration (in milliseconds) for multi-code results\n   */\n  getMulticodeCachingDuration(): Promise<any>;\n\n  /**\n   * Retrieves the value indicating whether deblurring is enabled for UPC/EAN barcodes\n   */\n  isUpcEanDeblurEnabled(): Promise<any>;\n\n  /**\n   * Checks if the detection of misshaped 1D barcodes is enabled\n   */\n  isMisshaped1DEnabled(): Promise<any>;\n\n  /**\n   * Retrieve whether to enable barcode thumbnail on result\n   */\n  isBarcodeThumbnailOnResultEnabled(): Promise<any>;\n\n  /**\n   * Retrieves the threshold between duplicate scans\n   */\n  getThresholdBetweenDuplicatesScans(): Promise<any>;\n\n  /**\n   * Checks if VIN restrictions are enabled\n   */\n  isVINRestrictionsEnabled(): Promise<any>;\n\n  /**\n   * Retrieves the resolution for barcode scanning\n   */\n  getBarkoderResolution(): Promise<any>;\n\n  /**\n * Retrieves whether Direct Part Marking (DPM) mode for Datamatrix barcodes is enabled\n */\n  isDatamatrixDpmModeEnabled(): Promise<any>;\n\n  /**\n* Retrieves whether Direct Part Marking (DPM) mode for QR barcodes is enabled\n*/\n  isQrDpmModeEnabled(): Promise<any>;\n\n  /**\n* Retrieves whether Direct Part Marking (DPM) mode for QR Micro barcodes is enabled\n*/\n  isQrMicroDpmModeEnabled(): Promise<any>;\n\n  /**\n* Retrieves whether Master checksum is enabled when scanning ID Documents \n*/\n  isIdDocumentMasterChecksumEnabled(): Promise<any>;\n\n  /**\n * Retrieves the hexadecimal color code representing the line color of the scanning indicator on the camera preview\n */\n  getScanningIndicatorColorHex(): Promise<any>;\n\n  /**\n * Retrieves the current width setting for the scanning indicator on the camera preview\n */\n  getScanningIndicatorWidth(): Promise<any>;\n\n  /**\n * Retrieves the current animation setting for the scanning indicator on the camera preview\n */\n  getScanningIndicatorAnimation(): Promise<any>;\n\n  /**\n * Retrieves if the scanning indicator is set to be always visible on the camera preview\n */\n  isScanningIndicatorAlwaysVisible(): Promise<any>;\n}\n\nexport enum DecodingSpeed {\n  fast,\n  normal,\n  slow,\n  rigorous,\n}\n\nexport enum FormattingType {\n  disabled,\n  automatic,\n  gs1,\n  aamva,\n  sadl,\n}\n\nexport enum MsiChecksumType {\n  disabled,\n  mod10,\n  mod11,\n  mod1010,\n  mod1110,\n  mod11IBM,\n  mod1110IBM,\n}\n\nexport enum Code39ChecksumType {\n  disabled,\n  enabled,\n}\n\nexport enum Code11ChecksumType {\n  disabled,\n  single,\n  double,\n}\n\nexport enum BarkoderCameraPosition {\n  BACK,\n  FRONT,\n}\n\nexport enum BarkoderResolution {\n  HD,\n  FHD,\n  UHD,\n}\n\nexport enum BarcodeType {\n  aztec,\n  aztecCompact,\n  qr,\n  qrMicro,\n  code128,\n  code93,\n  code39,\n  codabar,\n  code11,\n  msi,\n  upcA,\n  upcE,\n  upcE1,\n  ean13,\n  ean8,\n  pdf417,\n  pdf417Micro,\n  datamatrix,\n  code25,\n  interleaved25,\n  itf14,\n  iata25,\n  matrix25,\n  datalogic25,\n  coop25,\n  code32,\n  telepen,\n  dotcode,\n  idDocument,\n  databar14,         \n  databarLimited,\n  databarExpanded,\n  postalIMB,\n  postnet,\n  planet,\n  australianPost,\n  royalMail,\n  kix,\n  japanesePost\n}\n\nexport class BarkoderConfig {\n  locationLineColor?: string;\n  locationLineWidth?: number;\n  roiLineColor?: string;\n  roiLineWidth?: number;\n  roiOverlayBackgroundColor?: string;\n  scanningIndicatorColor?: string;\n  scanningIndicatorWidth?: number;\n  scanningIndicatorAnimation?: number;\n  scanningIndicatorAlwaysVisible?: boolean;\n  closeSessionOnResultEnabled?: boolean;\n  imageResultEnabled?: boolean;\n  locationInImageResultEnabled?: boolean;\n  locationInPreviewEnabled?: boolean;\n  pinchToZoomEnabled?: boolean;\n  regionOfInterestVisible?: boolean;\n  barkoderResolution?: BarkoderResolution;\n  beepOnSuccessEnabled?: boolean;\n  vibrateOnSuccessEnabled?: boolean;\n  decoder?: DekoderConfig;\n\n  constructor(config: Partial<BarkoderConfig>) {\n    Object.assign(this, config);\n  }\n}\n\nexport class DekoderConfig {\n  aztec?: BarcodeConfig;\n  aztecCompact?: BarcodeConfig;\n  qr?: BarcodeConfigWithDpmMode;\n  qrMicro?: BarcodeConfigWithDpmMode;\n  code128?: BarcodeConfigWithLength;\n  code93?: BarcodeConfigWithLength;\n  code39?: Code39BarcodeConfig;\n  codabar?: BarcodeConfigWithLength;\n  code11?: Code11BarcodeConfig;\n  msi?: MSIBarcodeConfig;\n  upcA?: BarcodeConfig;\n  upcE?: BarcodeConfig;\n  upcE1?: BarcodeConfig;\n  ean13?: BarcodeConfig;\n  ean8?: BarcodeConfig;\n  pdf417?: BarcodeConfig;\n  pdf417Micro?: BarcodeConfig;\n  datamatrix?: BarcodeConfigWithDpmMode;\n  code25?: BarcodeConfig;\n  interleaved25?: BarcodeConfig;\n  itf14?: BarcodeConfig;\n  iata25?: BarcodeConfig;\n  matrix25?: BarcodeConfig;\n  datalogic25?: BarcodeConfig;\n  coop25?: BarcodeConfig;\n  code32?: BarcodeConfig;\n  telepen?: BarcodeConfig;\n  dotcode?: BarcodeConfig;\n  idDocument?: IdDocumentBarcodeConfig;\n  databar14?: BarcodeConfig;         \n  databarLimited?: BarcodeConfig;\n  databarExpanded?: BarcodeConfig;\n  postalIMB?: BarcodeConfig;\n  postnet?: BarcodeConfig;\n  planet?: BarcodeConfig;\n  australianPost?: BarcodeConfig;\n  royalMail?: BarcodeConfig;\n  kix?: BarcodeConfig;\n  japanesePost?: BarcodeConfig;\n  general?: GeneralSettings;\n\n  constructor(config: Partial<DekoderConfig>) {\n    Object.assign(this, config);\n  }\n}\n\nexport class BarcodeConfig {\n  enabled?: boolean;\n\n  constructor(config: Partial<BarcodeConfig>) {\n    Object.assign(this, config);\n  }\n}\n\nexport class BarcodeConfigWithLength {\n  enabled?: boolean;\n  minLength?: number;\n  maxLength?: number;\n\n  constructor(config: Partial<BarcodeConfigWithLength>) {\n    Object.assign(this, config);\n  }\n\n  setLengthRange(minLength: number, maxLength: number) {\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n  }\n}\n\nexport class MSIBarcodeConfig {\n  enabled?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  checksum?: MsiChecksumType;\n\n  constructor(config: Partial<MSIBarcodeConfig>) {\n    Object.assign(this, config);\n  }\n\n  setLengthRange(minLength: number, maxLength: number) {\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n  }\n}\n\nexport class Code39BarcodeConfig {\n  enabled?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  checksum?: Code39ChecksumType;\n\n  constructor(config: Partial<Code39BarcodeConfig>) {\n    Object.assign(this, config);\n  }\n\n  setLengthRange(minLength: number, maxLength: number) {\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n  }\n}\n\nexport class Code11BarcodeConfig {\n  enabled?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  checksum?: Code11ChecksumType;\n\n  constructor(config: Partial<Code11BarcodeConfig>) {\n    Object.assign(this, config);\n  }\n\n  setLengthRange(minLength: number, maxLength: number) {\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n  }\n}\n\nexport class BarcodeConfigWithDpmMode {\n  enabled?: boolean;\n  dpmMode?: number;\n  minLength?: number;\n  maxLength?: number;\n\n  constructor(config: Partial<BarcodeConfigWithDpmMode>) {\n    Object.assign(this, config);\n  }\n\n  setLengthRange(minLength: number, maxLength: number) {\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n  }\n}\n\nexport enum IdDocumentMasterChecksumType {\n  disabled,\n  enabled,\n}\n\nexport class IdDocumentBarcodeConfig {\n  enabled?: boolean;\n  masterChecksum?: IdDocumentMasterChecksumType;\n\n  constructor(config: Partial<IdDocumentBarcodeConfig>) {\n    Object.assign(this, config);\n  }\n}\n\nexport class GeneralSettings {\n  threadsLimit?: number;\n  decodingSpeed?: DecodingSpeed;\n  roiX?: number;\n  roiY?: number;\n  roiWidth?: number;\n  roiHeight?: number;\n  formattingType?: FormattingType;\n  encodingCharacterSet?: string;\n  maximumResultsCount?: number;\n  duplicatesDelayMs?: number;\n  multicodeCachingDuration?: number;\n  multicodeCachingEnabled?: boolean;\n  upcEanDeblur?: number;\n  enableMisshaped1D?: number;\n\n  constructor(config: Partial<GeneralSettings>) {\n    Object.assign(this, config);\n  }\n\n  setROI(x: number, y: number, width: number, height: number): void {\n    this.roiX = x;\n    this.roiY = y;\n    this.roiWidth = width;\n    this.roiHeight = height;\n  }\n}\n\nexport class BarkoderResult {\n  decoderResults: DecoderResult[];\n  resultThumbnailsAsBase64?: string[] | null;\n  resultImageAsBase64?: string | null;\n\n  constructor(resultMap: Record<string, any>) {\n    if (Array.isArray(resultMap['decoderResults'])) {\n      this.decoderResults = resultMap['decoderResults'].map((result: any) => new DecoderResult(result));\n    } else {\n      this.decoderResults = [];\n    }\n\n    this.resultThumbnailsAsBase64 = Array.isArray(resultMap['resultThumbnailsAsBase64'])\n      ? resultMap['resultThumbnailsAsBase64']\n        .map(thumbnail => this.convertToBase64(thumbnail))\n        .filter((thumbnail): thumbnail is string => thumbnail !== null)\n      : null;\n\n    this.resultImageAsBase64 = this.convertToBase64(resultMap['resultImageAsBase64']);\n  }\n\n  private convertToBase64(data: string | null | undefined): string | null {\n    return data ? `data:image/jpeg;base64,${data}` : null;\n  }\n}\n\nexport class DecoderResult {\n  barcodeType: number;\n  barcodeTypeName: string;\n  binaryDataAsBase64: string;\n  textualData: string;\n  characterSet?: string | null;\n  extra?: Record<string, any> | null;\n  mrzImagesAsBase64?: { name: string; base64: string }[];\n\n  constructor(resultMap: Record<string, any>) {\n    this.barcodeType = resultMap['barcodeType'];\n    this.barcodeTypeName = resultMap['barcodeTypeName'];\n    this.binaryDataAsBase64 = resultMap['binaryDataAsBase64'];\n    this.textualData = resultMap['textualData'];\n    this.characterSet = resultMap['characterSet'] || null;\n    this.extra = 'extra' in resultMap ? JSON.parse(resultMap['extra']) : null;\n    this.mrzImagesAsBase64 = Array.isArray(resultMap['mrzImagesAsBase64'])\n      ? resultMap['mrzImagesAsBase64'].map((image: { name: string; base64: string }) => ({\n        name: image.name,\n        base64: `data:image/jpeg;base64,${image.base64}`,\n      }))\n      : [];\n  }\n}"]}