{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAgOA,MAAM,CAAN,IAAY,WA4BX;AA5BD,WAAY,WAAW;IACrB,+CAAK,CAAA;IACL,6DAAY,CAAA;IACZ,yCAAE,CAAA;IACF,mDAAO,CAAA;IACP,mDAAO,CAAA;IACP,iDAAM,CAAA;IACN,iDAAM,CAAA;IACN,mDAAO,CAAA;IACP,iDAAM,CAAA;IACN,2CAAG,CAAA;IACH,8CAAI,CAAA;IACJ,8CAAI,CAAA;IACJ,gDAAK,CAAA;IACL,gDAAK,CAAA;IACL,8CAAI,CAAA;IACJ,kDAAM,CAAA;IACN,4DAAW,CAAA;IACX,0DAAU,CAAA;IACV,kDAAM,CAAA;IACN,gEAAa,CAAA;IACb,gDAAK,CAAA;IACL,kDAAM,CAAA;IACN,sDAAQ,CAAA;IACR,4DAAW,CAAA;IACX,kDAAM,CAAA;IACN,kDAAM,CAAA;IACN,oDAAO,CAAA;AACT,CAAC,EA5BW,WAAW,KAAX,WAAW,QA4BtB;AAED,MAAM,CAAN,IAAY,cAAkD;AAA9D,WAAY,cAAc;IAAG,2DAAQ,CAAA;IAAE,6DAAS,CAAA;IAAE,iDAAG,CAAA;IAAE,qDAAK,CAAA;AAAC,CAAC,EAAlD,cAAc,KAAd,cAAc,QAAoC;AAE9D,MAAM,CAAN,IAAY,eAQX;AARD,WAAY,eAAe;IACzB,6DAAQ,CAAA;IACR,uDAAK,CAAA;IACL,uDAAK,CAAA;IACL,2DAAO,CAAA;IACP,2DAAO,CAAA;IACP,6DAAQ,CAAA;IACR,iEAAU,CAAA;AACZ,CAAC,EARW,eAAe,KAAf,eAAe,QAQ1B;AAED,MAAM,CAAN,IAAY,kBAAwC;AAApD,WAAY,kBAAkB;IAAG,mEAAQ,CAAA;IAAE,iEAAO,CAAA;AAAC,CAAC,EAAxC,kBAAkB,KAAlB,kBAAkB,QAAsB;AAEpD,MAAM,CAAN,IAAY,kBAA+C;AAA3D,WAAY,kBAAkB;IAAG,mEAAQ,CAAA;IAAE,+DAAM,CAAA;IAAE,+DAAM,CAAA;AAAC,CAAC,EAA/C,kBAAkB,KAAlB,kBAAkB,QAA6B;AAE3D,MAAM,CAAN,IAAY,aAAoC;AAAhD,WAAY,aAAa;IAAG,iDAAI,CAAA;IAAE,qDAAM,CAAA;IAAE,iDAAI,CAAA;AAAC,CAAC,EAApC,aAAa,KAAb,aAAa,QAAuB;AAEhD,MAAM,CAAN,IAAY,kBAAmC;AAA/C,WAAY,kBAAkB;IAAG,+DAAM,CAAA;IAAE,2DAAI,CAAA;AAAC,CAAC,EAAnC,kBAAkB,KAAlB,kBAAkB,QAAiB","sourcesContent":["import { Plugin } from '@capacitor/core'\n\nexport interface BarkoderPlugin extends Plugin {\n\n  // - Initialize the BarkoderView\n\n  initialize(options: {\n    width: number,\n    height: number,\n    x: number,\n    y: number,\n   }): Promise<any>;\n\n  // - Register with license key\n\n  registerWithLicenseKey(options: { \n    licenseKey: string \n  }): Promise<any>;\n\n  // - Setters\n\n  setZoomFactor(options: { \n    value: number\n   }): Promise<any>;\n\n  setFlashEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n  startCamera(): Promise<any>;\n  startScanning(): Promise<any>;\n  stopScanning(): Promise<any>;\n  pauseScanning(): Promise<any>;\n\n  setLocationLineColor(options: { \n    value: string\n   }): Promise<any>;\n\n   setLocationLineWidth(options: { \n    value: number\n   }): Promise<any>;\n\n   setRoiLineColor(options: { \n    value: string\n   }): Promise<any>;\n\n   setRoiLineWidth(options: { \n    value: number\n   }): Promise<any>;\n\n   setRoiOverlayBackgroundColor(options: { \n    value: string\n   }): Promise<any>;\n\n   setCloseSessionOnResultEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setImageResultEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setLocationInImageResultEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setRegionOfInterest(options: {\n    left: number,\n    top: number,\n    width: number,\n    height: number,\n   }): Promise<any>;\n\n   setThreadsLimit(options: { \n    value: number\n   }): Promise<any>;\n\n   setLocationInPreviewEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setPinchToZoomEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setRegionOfInterestVisible(options: { \n    value: boolean\n   }): Promise<any>;\n\n   setBarkoderResolution(options: { \n    value: number\n   }): Promise<any>;\n\n   setBeepOnSuccessEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setVibrateOnSuccessEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   showLogMessages(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setBarcodeTypeLengthRange(options: {\n    type: number,\n    min: number,\n    max: number,\n   }): Promise<any>;\n\n   setEncodingCharacterSet(options: { \n    value: string \n  }): Promise<any>;\n   \n  setDecodingSpeed(options: { \n    value: number\n   }): Promise<any>;\n\n   setFormattingType(options: { \n    value: number\n   }): Promise<any>;\n\n  setCode11ChecksumType(options: { \n    value: number\n   }): Promise<any>;\n   \n   setMsiChecksumType(options: { \n    value: number\n   }): Promise<any>;\n\n   setCode39ChecksumType(options: { \n    value: number\n   }): Promise<any>;\n\n   setBarcodeTypeEnabled(options: {\n    type: number,\n    enabled: boolean,\n   }): Promise<any>;\n\n   setMulticodeCachingEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setMulticodeCachingDuration(options: { \n    value: number\n   }): Promise<any>;\n\n   setMaximumResultsCount(options: { \n    value: number\n   }): Promise<any>;\n\n   setBarcodeThumbnailOnResultEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setDuplicatesDelayMs(options: { \n    value: number\n   }): Promise<any>;\n\n   setThresholdBetweenDuplicatesScans(options: { \n    value: number\n   }): Promise<any>;\n\n   setUpcEanDeblurEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setMisshaped1DEnabled(options: { \n    enabled: boolean\n   }): Promise<any>;\n\n   setEnableVINRestrictions(options: { \n    value: boolean\n   }): Promise<any>;\n\n   // - Getters\n\n   isFlashAvailable(): Promise<any>;\n   isCloseSessionOnResultEnabled(): Promise<any>;\n   isImageResultEnabled(): Promise<any>;\n   isLocationInImageResultEnabled(): Promise<any>;\n   isLocationInPreviewEnabled(): Promise<any>;\n   isPinchToZoomEnabled(): Promise<any>;\n   isRegionOfInterestVisible(): Promise<any>;\n   isBeepOnSuccessEnabled(): Promise<any>;\n   isVibrateOnSuccessEnabled(): Promise<any>;\n   getVersion(): Promise<any>;\n   getLocationLineColorHex(): Promise<any>;\n   getRoiLineColorHex(): Promise<any>;\n   getRoiOverlayBackgroundColorHex(): Promise<any>;\n   getMaxZoomFactor(): Promise<any>;\n   getLocationLineWidth(): Promise<any>;\n   getRoiLineWidth(): Promise<any>;\n   getRegionOfInterest(): Promise<any>;\n\n   getBarcodeTypeLengthRange(options: { \n    type: number\n   }): Promise<any>;\n\n   getMsiChecksumType(): Promise<any>;\n   getCode39ChecksumType(): Promise<any>;\n   getCode11ChecksumType(): Promise<any>;\n   getEncodingCharacterSet(): Promise<any>;\n   getDecodingSpeed(): Promise<any>;\n   getFormattingType(): Promise<any>;\n   getThreadsLimit(): Promise<any>;\n   getMaximumResultsCount(): Promise<any>;\n   getDuplicatesDelayMs(): Promise<any>;\n\n   isBarcodeTypeEnabled(options: { \n    type: number\n   }): Promise<any>;\n\n   getMulticodeCachingEnabled(): Promise<any>;\n   getMulticodeCachingDuration(): Promise<any>;\n   isUpcEanDeblurEnabled(): Promise<any>;\n   isMisshaped1DEnabled(): Promise<any>;\n   isBarcodeThumbnailOnResultEnabled(): Promise<any>;\n   getThresholdBetweenDuplicatesScans(): Promise<any>;\n   isVINRestrictionsEnabled(): Promise<any>;\n\n}\n\nexport enum BarcodeType {\n  aztec,\n  aztecCompact,\n  qr,\n  qrMicro,\n  code128,\n  code93,\n  code39,\n  codabar,\n  code11,\n  msi,\n  upcA,\n  upcE,\n  upcE1,\n  ean13,\n  ean8,\n  pdf417,\n  pdf417Micro,\n  datamatrix,\n  code25,\n  interleaved25,\n  itf14,\n  iata25,\n  matrix25,\n  datalogic25,\n  coop25,\n  code32,\n  telepen\n}\n\nexport enum FormattingType { disabled, automatic, gs1, aamva }\n\nexport enum MsiChecksumType {\n  disabled,\n  mod10,\n  mod11,\n  mod1010,\n  mod1110,\n  mod11IBM,\n  mod1110IBM\n}\n\nexport enum Code39ChecksumType { disabled, enabled }\n\nexport enum Code11ChecksumType { disabled, single, double }\n\nexport enum DecodingSpeed { fast, normal, slow }\n\nexport enum BarkoderResolution { normal, high }"]}