{
  "api": {
    "name": "BarkoderPlugin",
    "slug": "barkoderplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "initialize",
        "signature": "(options: { width: number; height: number; x: number; y: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ width: number; height: number; x: number; y: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "initialize"
      },
      {
        "name": "registerWithLicenseKey",
        "signature": "(options: { licenseKey: string; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ licenseKey: string; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "registerwithlicensekey"
      },
      {
        "name": "setZoomFactor",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the zoom factor for the device's camera, adjusting the level of zoom during barcode scanning",
        "complexTypes": [],
        "slug": "setzoomfactor"
      },
      {
        "name": "setFlashEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Enables or disables the device's flash (torch) for illumination during barcode scanning",
        "complexTypes": [],
        "slug": "setflashenabled"
      },
      {
        "name": "startCamera",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "startcamera"
      },
      {
        "name": "startScanning",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Initiates the barcode scanning process, allowing the application to detect and decode barcodes from the device's camera feed",
        "complexTypes": [],
        "slug": "startscanning"
      },
      {
        "name": "stopScanning",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Halts the barcode scanning process, stopping the camera from capturing and processing barcode information",
        "complexTypes": [],
        "slug": "stopscanning"
      },
      {
        "name": "pauseScanning",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Temporarily suspends the barcode scanning process, pausing the camera feed without completely stopping the scanning session",
        "complexTypes": [],
        "slug": "pausescanning"
      },
      {
        "name": "scanImage",
        "signature": "(options: { base64: string; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ base64: string; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Scan barcodes from base64 string image",
        "complexTypes": [],
        "slug": "scanimage"
      },
      {
        "name": "setLocationLineColor",
        "signature": "(options: { value: string; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: string; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the color of the lines used to indicate the location of detected barcodes on the camera feed",
        "complexTypes": [],
        "slug": "setlocationlinecolor"
      },
      {
        "name": "setLocationLineWidth",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the width of the lines indicating the location of detected barcodes on the camera feed",
        "complexTypes": [],
        "slug": "setlocationlinewidth"
      },
      {
        "name": "setRoiLineColor",
        "signature": "(options: { value: string; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: string; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the color of the lines outlining the Region of Interest (ROI) for barcode scanning on the camera feed",
        "complexTypes": [],
        "slug": "setroilinecolor"
      },
      {
        "name": "setRoiLineWidth",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the width of the lines outlining the Region of Interest (ROI) for barcode scanning on the camera feed",
        "complexTypes": [],
        "slug": "setroilinewidth"
      },
      {
        "name": "setRoiOverlayBackgroundColor",
        "signature": "(options: { value: string; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: string; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the background color of the overlay within the Region of Interest (ROI) for barcode scanning on the camera feed",
        "complexTypes": [],
        "slug": "setroioverlaybackgroundcolor"
      },
      {
        "name": "setCloseSessionOnResultEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Enables or disables the automatic closing of the scanning session upon detecting a barcode result",
        "complexTypes": [],
        "slug": "setclosesessiononresultenabled"
      },
      {
        "name": "setImageResultEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Enables or disables the capturing and processing of image data when a barcode is successfully detected",
        "complexTypes": [],
        "slug": "setimageresultenabled"
      },
      {
        "name": "setLocationInImageResultEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Enables or disables the inclusion of barcode location information within the image data result",
        "complexTypes": [],
        "slug": "setlocationinimageresultenabled"
      },
      {
        "name": "setRegionOfInterest",
        "signature": "(options: { left: number; top: number; width: number; height: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ left: number; top: number; width: number; height: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Defines the Region of Interest (ROI) on the camera preview for barcode scanning, specifying an area where the application focuses on detecting barcodes",
        "complexTypes": [],
        "slug": "setregionofinterest"
      },
      {
        "name": "setThreadsLimit",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the threads limit",
        "complexTypes": [],
        "slug": "setthreadslimit"
      },
      {
        "name": "setLocationInPreviewEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Enables or disables the display of barcode location information on the camera preview",
        "complexTypes": [],
        "slug": "setlocationinpreviewenabled"
      },
      {
        "name": "setPinchToZoomEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Enables or disables the pinch-to-zoom feature for adjusting the zoom level during barcode scanning",
        "complexTypes": [],
        "slug": "setpinchtozoomenabled"
      },
      {
        "name": "setRegionOfInterestVisible",
        "signature": "(options: { value: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the visibility of the Region of Interest (ROI) on the camera preview",
        "complexTypes": [],
        "slug": "setregionofinterestvisible"
      },
      {
        "name": "setBarkoderResolution",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the resolution for barcode scanning",
        "complexTypes": [],
        "slug": "setbarkoderresolution"
      },
      {
        "name": "setBeepOnSuccessEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Enables or disables the audible beep sound upon successfully decoding a barcode",
        "complexTypes": [],
        "slug": "setbeeponsuccessenabled"
      },
      {
        "name": "setVibrateOnSuccessEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Enables or disables the device vibration upon successfully decoding a barcode.",
        "complexTypes": [],
        "slug": "setvibrateonsuccessenabled"
      },
      {
        "name": "showLogMessages",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "showlogmessages"
      },
      {
        "name": "setBarcodeTypeLengthRange",
        "signature": "(options: { type: number; min: number; max: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ type: number; min: number; max: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the length range for the specified barcode type",
        "complexTypes": [],
        "slug": "setbarcodetypelengthrange"
      },
      {
        "name": "setEncodingCharacterSet",
        "signature": "(options: { value: string; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: string; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the encoding character set for barcode scanning",
        "complexTypes": [],
        "slug": "setencodingcharacterset"
      },
      {
        "name": "setDecodingSpeed",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the decoding speed for barcode scanning",
        "complexTypes": [],
        "slug": "setdecodingspeed"
      },
      {
        "name": "setFormattingType",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the formatting type for barcode scanning",
        "complexTypes": [],
        "slug": "setformattingtype"
      },
      {
        "name": "setCode11ChecksumType",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the Code11 checksum type",
        "complexTypes": [],
        "slug": "setcode11checksumtype"
      },
      {
        "name": "setMsiChecksumType",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the MSI checksum type",
        "complexTypes": [],
        "slug": "setmsichecksumtype"
      },
      {
        "name": "setCode39ChecksumType",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the Code39 checksum type",
        "complexTypes": [],
        "slug": "setcode39checksumtype"
      },
      {
        "name": "setBarcodeTypeEnabled",
        "signature": "(options: { type: number; enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ type: number; enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets whether a specific barcode type is enabled",
        "complexTypes": [],
        "slug": "setbarcodetypeenabled"
      },
      {
        "name": "setMulticodeCachingEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets whether multi-code caching is enabled",
        "complexTypes": [],
        "slug": "setmulticodecachingenabled"
      },
      {
        "name": "setMulticodeCachingDuration",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the caching duration (in milliseconds) for multi-code results",
        "complexTypes": [],
        "slug": "setmulticodecachingduration"
      },
      {
        "name": "setMaximumResultsCount",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the maximum number of results to be returned from barcode scanning",
        "complexTypes": [],
        "slug": "setmaximumresultscount"
      },
      {
        "name": "setBarcodeThumbnailOnResultEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "A boolean indicating whether to enable barcode thumbnail on result.",
        "complexTypes": [],
        "slug": "setbarcodethumbnailonresultenabled"
      },
      {
        "name": "setDuplicatesDelayMs",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the delay in milliseconds for considering duplicate barcodes during scanning",
        "complexTypes": [],
        "slug": "setduplicatesdelayms"
      },
      {
        "name": "setThresholdBetweenDuplicatesScans",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the threshold between duplicate scans",
        "complexTypes": [],
        "slug": "setthresholdbetweenduplicatesscans"
      },
      {
        "name": "setUpcEanDeblurEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets whether the deblurring feature for UPC/EAN barcodes is enabled",
        "complexTypes": [],
        "slug": "setupceandeblurenabled"
      },
      {
        "name": "setMisshaped1DEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets whether the detection of misshaped 1D barcodes is enabled",
        "complexTypes": [],
        "slug": "setmisshaped1denabled"
      },
      {
        "name": "setEnableVINRestrictions",
        "signature": "(options: { value: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets whether Vehicle Identification Number (VIN) restrictions are enabled",
        "complexTypes": [],
        "slug": "setenablevinrestrictions"
      },
      {
        "name": "setDatamatrixDpmModeEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets whether the Direct Part Marking (DPM) mode for Datamatrix barcodes is enabled.",
        "complexTypes": [],
        "slug": "setdatamatrixdpmmodeenabled"
      },
      {
        "name": "setQrDpmModeEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets whether the Direct Part Marking (DPM) mode for QR barcodes is enabled.",
        "complexTypes": [],
        "slug": "setqrdpmmodeenabled"
      },
      {
        "name": "setQrMicroDpmModeEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets whether the Direct Part Marking (DPM) mode for QR Micro barcodes is enabled.",
        "complexTypes": [],
        "slug": "setqrmicrodpmmodeenabled"
      },
      {
        "name": "configureBarkoder",
        "signature": "(options: { barkoderConfig: BarkoderConfig; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ barkoderConfig: BarkoderConfig; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Configures the Barkoder functionality based on the provided configuration",
        "complexTypes": [
          "BarkoderConfig"
        ],
        "slug": "configurebarkoder"
      },
      {
        "name": "setIdDocumentMasterChecksumEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets whether Master checksum should be requiered when scanning ID Documents",
        "complexTypes": [],
        "slug": "setiddocumentmasterchecksumenabled"
      },
      {
        "name": "setUPCEexpandToUPCA",
        "signature": "(options: { value: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets whether the UPC-E barcodes should be expanded to UPC-A format",
        "complexTypes": [],
        "slug": "setupceexpandtoupca"
      },
      {
        "name": "setUPCE1expandToUPCA",
        "signature": "(options: { value: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets whether the UPC-E1 barcodes should be expanded to UPC-A format",
        "complexTypes": [],
        "slug": "setupce1expandtoupca"
      },
      {
        "name": "setCustomOption",
        "signature": "(options: { option: string; value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ option: string; value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets a custom option with a string option and integer value",
        "complexTypes": [],
        "slug": "setcustomoption"
      },
      {
        "name": "setScanningIndicatorColor",
        "signature": "(options: { value: string; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: string; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the color of the lines outlining the scanning indicator for barcode scanning on the camera feed",
        "complexTypes": [],
        "slug": "setscanningindicatorcolor"
      },
      {
        "name": "setScanningIndicatorWidth",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the width of the scanning indicator for barcode scanning on the camera feed",
        "complexTypes": [],
        "slug": "setscanningindicatorwidth"
      },
      {
        "name": "setScanningIndicatorAnimation",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the animation of the scanning indicator for barcode scanning on the camera feed",
        "complexTypes": [],
        "slug": "setscanningindicatoranimation"
      },
      {
        "name": "setScanningIndicatorAlwaysVisible",
        "signature": "(options: { value: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the scanning indicator to be always shown on the camera feed",
        "complexTypes": [],
        "slug": "setscanningindicatoralwaysvisible"
      },
      {
        "name": "setDynamicExposure",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets the camera's exposure dynamically based on the provided intensity, cycling through predefined compensation values",
        "complexTypes": [],
        "slug": "setdynamicexposure"
      },
      {
        "name": "setCentricFocusAndExposure",
        "signature": "(options: { value: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Set the camera to use the center of the viewfinder for focus and exposure",
        "complexTypes": [],
        "slug": "setcentricfocusandexposure"
      },
      {
        "name": "setEnableComposite",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Sets wheter Composite Mode should be enabled when scanning",
        "complexTypes": [],
        "slug": "setenablecomposite"
      },
      {
        "name": "isFlashAvailable",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Checks whether the device has a built-in flash (torch) that can be used for illumination during barcode scanning",
        "complexTypes": [],
        "slug": "isflashavailable"
      },
      {
        "name": "isCloseSessionOnResultEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Enables or disables the automatic closing of the scanning session upon detecting a barcode result",
        "complexTypes": [],
        "slug": "isclosesessiononresultenabled"
      },
      {
        "name": "isImageResultEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Enables or disables the capturing and processing of image data when a barcode is successfully detected",
        "complexTypes": [],
        "slug": "isimageresultenabled"
      },
      {
        "name": "isLocationInImageResultEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Enables or disables the inclusion of barcode location information within the image data result",
        "complexTypes": [],
        "slug": "islocationinimageresultenabled"
      },
      {
        "name": "isLocationInPreviewEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Checks if location in preview is enabled",
        "complexTypes": [],
        "slug": "islocationinpreviewenabled"
      },
      {
        "name": "isPinchToZoomEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Checks if pinch to zoom is enabled",
        "complexTypes": [],
        "slug": "ispinchtozoomenabled"
      },
      {
        "name": "isRegionOfInterestVisible",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Checks if the region of interest (ROI) is visible",
        "complexTypes": [],
        "slug": "isregionofinterestvisible"
      },
      {
        "name": "isBeepOnSuccessEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the value indicating whether a beep sound is played on successful barcode scanning",
        "complexTypes": [],
        "slug": "isbeeponsuccessenabled"
      },
      {
        "name": "isVibrateOnSuccessEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the value indicating whether vibration is enabled on successful barcode scanning",
        "complexTypes": [],
        "slug": "isvibrateonsuccessenabled"
      },
      {
        "name": "getVersion",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the version of the Barkoder library",
        "complexTypes": [],
        "slug": "getversion"
      },
      {
        "name": "getLocationLineColorHex",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the hexadecimal color code representing the line color used to indicate the location of detected barcodes",
        "complexTypes": [],
        "slug": "getlocationlinecolorhex"
      },
      {
        "name": "getRoiLineColorHex",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the hexadecimal color code representing the line color of the Region of Interest (ROI) on the camera preview",
        "complexTypes": [],
        "slug": "getroilinecolorhex"
      },
      {
        "name": "getRoiOverlayBackgroundColorHex",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the hexadecimal color code representing the background color of the overlay within the Region of Interest (ROI) on the camera preview",
        "complexTypes": [],
        "slug": "getroioverlaybackgroundcolorhex"
      },
      {
        "name": "getMaxZoomFactor",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the maximum available zoom factor for the device's camera",
        "complexTypes": [],
        "slug": "getmaxzoomfactor"
      },
      {
        "name": "getLocationLineWidth",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the current width setting for the lines indicating the location of detected barcodes on the camera feed",
        "complexTypes": [],
        "slug": "getlocationlinewidth"
      },
      {
        "name": "getRoiLineWidth",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the current width setting for the lines outlining the Region of Interest (ROI) on the camera preview",
        "complexTypes": [],
        "slug": "getroilinewidth"
      },
      {
        "name": "getRegionOfInterest",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the region of interest (ROI)",
        "complexTypes": [],
        "slug": "getregionofinterest"
      },
      {
        "name": "getBarcodeTypeLengthRange",
        "signature": "(options: { type: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ type: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the length range of a specific barcode type",
        "complexTypes": [],
        "slug": "getbarcodetypelengthrange"
      },
      {
        "name": "getMsiChecksumType",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the MSI checksum type",
        "complexTypes": [],
        "slug": "getmsichecksumtype"
      },
      {
        "name": "getCode39ChecksumType",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the checksum type for Code 39 barcodes",
        "complexTypes": [],
        "slug": "getcode39checksumtype"
      },
      {
        "name": "getCode11ChecksumType",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the Code11 checksum type",
        "complexTypes": [],
        "slug": "getcode11checksumtype"
      },
      {
        "name": "getEncodingCharacterSet",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the character set used for encoding barcode data",
        "complexTypes": [],
        "slug": "getencodingcharacterset"
      },
      {
        "name": "getDecodingSpeed",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the current decoding speed setting for barcode scanning",
        "complexTypes": [],
        "slug": "getdecodingspeed"
      },
      {
        "name": "getFormattingType",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the formatting type used for presenting decoded barcode data.",
        "complexTypes": [],
        "slug": "getformattingtype"
      },
      {
        "name": "getThreadsLimit",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the threads limit",
        "complexTypes": [],
        "slug": "getthreadslimit"
      },
      {
        "name": "getMaximumResultsCount",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the maximum number of results to be returned from barcode scanning at once",
        "complexTypes": [],
        "slug": "getmaximumresultscount"
      },
      {
        "name": "getDuplicatesDelayMs",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the delay in milliseconds for considering duplicate barcodes during scanning",
        "complexTypes": [],
        "slug": "getduplicatesdelayms"
      },
      {
        "name": "isBarcodeTypeEnabled",
        "signature": "(options: { type: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ type: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Checks if a specific barcode type is enabled",
        "complexTypes": [],
        "slug": "isbarcodetypeenabled"
      },
      {
        "name": "getMulticodeCachingEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves whether multi-code caching is enabled",
        "complexTypes": [],
        "slug": "getmulticodecachingenabled"
      },
      {
        "name": "getMulticodeCachingDuration",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the caching duration (in milliseconds) for multi-code results",
        "complexTypes": [],
        "slug": "getmulticodecachingduration"
      },
      {
        "name": "isUpcEanDeblurEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the value indicating whether deblurring is enabled for UPC/EAN barcodes",
        "complexTypes": [],
        "slug": "isupceandeblurenabled"
      },
      {
        "name": "isMisshaped1DEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Checks if the detection of misshaped 1D barcodes is enabled",
        "complexTypes": [],
        "slug": "ismisshaped1denabled"
      },
      {
        "name": "isBarcodeThumbnailOnResultEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieve whether to enable barcode thumbnail on result",
        "complexTypes": [],
        "slug": "isbarcodethumbnailonresultenabled"
      },
      {
        "name": "getThresholdBetweenDuplicatesScans",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the threshold between duplicate scans",
        "complexTypes": [],
        "slug": "getthresholdbetweenduplicatesscans"
      },
      {
        "name": "isVINRestrictionsEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Checks if VIN restrictions are enabled",
        "complexTypes": [],
        "slug": "isvinrestrictionsenabled"
      },
      {
        "name": "getBarkoderResolution",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the resolution for barcode scanning",
        "complexTypes": [],
        "slug": "getbarkoderresolution"
      },
      {
        "name": "isDatamatrixDpmModeEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves whether Direct Part Marking (DPM) mode for Datamatrix barcodes is enabled",
        "complexTypes": [],
        "slug": "isdatamatrixdpmmodeenabled"
      },
      {
        "name": "isQrDpmModeEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves whether Direct Part Marking (DPM) mode for QR barcodes is enabled",
        "complexTypes": [],
        "slug": "isqrdpmmodeenabled"
      },
      {
        "name": "isQrMicroDpmModeEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves whether Direct Part Marking (DPM) mode for QR Micro barcodes is enabled",
        "complexTypes": [],
        "slug": "isqrmicrodpmmodeenabled"
      },
      {
        "name": "isIdDocumentMasterChecksumEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves whether Master checksum is enabled when scanning ID Documents",
        "complexTypes": [],
        "slug": "isiddocumentmasterchecksumenabled"
      },
      {
        "name": "getScanningIndicatorColorHex",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the hexadecimal color code representing the line color of the scanning indicator on the camera preview",
        "complexTypes": [],
        "slug": "getscanningindicatorcolorhex"
      },
      {
        "name": "getScanningIndicatorWidth",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the current width setting for the scanning indicator on the camera preview",
        "complexTypes": [],
        "slug": "getscanningindicatorwidth"
      },
      {
        "name": "getScanningIndicatorAnimation",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves the current animation setting for the scanning indicator on the camera preview",
        "complexTypes": [],
        "slug": "getscanningindicatoranimation"
      },
      {
        "name": "isScanningIndicatorAlwaysVisible",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "Retrieves if the scanning indicator is set to be always visible on the camera preview",
        "complexTypes": [],
        "slug": "isscanningindicatoralwaysvisible"
      }
    ],
    "properties": []
  },
  "interfaces": [],
  "enums": [],
  "typeAliases": [],
  "pluginConfigs": []
}