{
  "api": {
    "name": "BarkoderPlugin",
    "slug": "barkoderplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "initialize",
        "signature": "(options: { width: number; height: number; x: number; y: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ width: number; height: number; x: number; y: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "initialize"
      },
      {
        "name": "registerWithLicenseKey",
        "signature": "(options: { licenseKey: string; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ licenseKey: string; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "registerwithlicensekey"
      },
      {
        "name": "setZoomFactor",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setzoomfactor"
      },
      {
        "name": "setFlashEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setflashenabled"
      },
      {
        "name": "startCamera",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "startcamera"
      },
      {
        "name": "startScanning",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "startscanning"
      },
      {
        "name": "stopScanning",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "stopscanning"
      },
      {
        "name": "pauseScanning",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "pausescanning"
      },
      {
        "name": "setLocationLineColor",
        "signature": "(options: { value: string; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: string; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setlocationlinecolor"
      },
      {
        "name": "setLocationLineWidth",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setlocationlinewidth"
      },
      {
        "name": "setRoiLineColor",
        "signature": "(options: { value: string; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: string; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setroilinecolor"
      },
      {
        "name": "setRoiLineWidth",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setroilinewidth"
      },
      {
        "name": "setRoiOverlayBackgroundColor",
        "signature": "(options: { value: string; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: string; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setroioverlaybackgroundcolor"
      },
      {
        "name": "setCloseSessionOnResultEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setclosesessiononresultenabled"
      },
      {
        "name": "setImageResultEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setimageresultenabled"
      },
      {
        "name": "setLocationInImageResultEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setlocationinimageresultenabled"
      },
      {
        "name": "setRegionOfInterest",
        "signature": "(options: { left: number; top: number; width: number; height: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ left: number; top: number; width: number; height: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setregionofinterest"
      },
      {
        "name": "setThreadsLimit",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setthreadslimit"
      },
      {
        "name": "setLocationInPreviewEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setlocationinpreviewenabled"
      },
      {
        "name": "setPinchToZoomEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setpinchtozoomenabled"
      },
      {
        "name": "setRegionOfInterestVisible",
        "signature": "(options: { value: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setregionofinterestvisible"
      },
      {
        "name": "setBarkoderResolution",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setbarkoderresolution"
      },
      {
        "name": "setBeepOnSuccessEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setbeeponsuccessenabled"
      },
      {
        "name": "setVibrateOnSuccessEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setvibrateonsuccessenabled"
      },
      {
        "name": "showLogMessages",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "showlogmessages"
      },
      {
        "name": "setBarcodeTypeLengthRange",
        "signature": "(options: { type: number; min: number; max: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ type: number; min: number; max: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setbarcodetypelengthrange"
      },
      {
        "name": "setEncodingCharacterSet",
        "signature": "(options: { value: string; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: string; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setencodingcharacterset"
      },
      {
        "name": "setDecodingSpeed",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setdecodingspeed"
      },
      {
        "name": "setFormattingType",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setformattingtype"
      },
      {
        "name": "setCode11ChecksumType",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setcode11checksumtype"
      },
      {
        "name": "setMsiChecksumType",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setmsichecksumtype"
      },
      {
        "name": "setCode39ChecksumType",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setcode39checksumtype"
      },
      {
        "name": "setBarcodeTypeEnabled",
        "signature": "(options: { type: number; enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ type: number; enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setbarcodetypeenabled"
      },
      {
        "name": "setMulticodeCachingEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setmulticodecachingenabled"
      },
      {
        "name": "setMulticodeCachingDuration",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setmulticodecachingduration"
      },
      {
        "name": "setMaximumResultsCount",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setmaximumresultscount"
      },
      {
        "name": "setBarcodeThumbnailOnResultEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setbarcodethumbnailonresultenabled"
      },
      {
        "name": "setDuplicatesDelayMs",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setduplicatesdelayms"
      },
      {
        "name": "setThresholdBetweenDuplicatesScans",
        "signature": "(options: { value: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setthresholdbetweenduplicatesscans"
      },
      {
        "name": "setUpcEanDeblurEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setupceandeblurenabled"
      },
      {
        "name": "setMisshaped1DEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setmisshaped1denabled"
      },
      {
        "name": "setEnableVINRestrictions",
        "signature": "(options: { value: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setenablevinrestrictions"
      },
      {
        "name": "setDatamatrixDpmModeEnabled",
        "signature": "(options: { enabled: boolean; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ enabled: boolean; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setdatamatrixdpmmodeenabled"
      },
      {
        "name": "configureBarkoder",
        "signature": "(options: { barkoderConfig: BarkoderConfig; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ barkoderConfig: BarkoderConfig; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "BarkoderConfig"
        ],
        "slug": "configurebarkoder"
      },
      {
        "name": "isFlashAvailable",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "isflashavailable"
      },
      {
        "name": "isCloseSessionOnResultEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "isclosesessiononresultenabled"
      },
      {
        "name": "isImageResultEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "isimageresultenabled"
      },
      {
        "name": "isLocationInImageResultEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "islocationinimageresultenabled"
      },
      {
        "name": "isLocationInPreviewEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "islocationinpreviewenabled"
      },
      {
        "name": "isPinchToZoomEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "ispinchtozoomenabled"
      },
      {
        "name": "isRegionOfInterestVisible",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "isregionofinterestvisible"
      },
      {
        "name": "isBeepOnSuccessEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "isbeeponsuccessenabled"
      },
      {
        "name": "isVibrateOnSuccessEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "isvibrateonsuccessenabled"
      },
      {
        "name": "getVersion",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getversion"
      },
      {
        "name": "getLocationLineColorHex",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getlocationlinecolorhex"
      },
      {
        "name": "getRoiLineColorHex",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getroilinecolorhex"
      },
      {
        "name": "getRoiOverlayBackgroundColorHex",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getroioverlaybackgroundcolorhex"
      },
      {
        "name": "getMaxZoomFactor",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getmaxzoomfactor"
      },
      {
        "name": "getLocationLineWidth",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getlocationlinewidth"
      },
      {
        "name": "getRoiLineWidth",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getroilinewidth"
      },
      {
        "name": "getRegionOfInterest",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getregionofinterest"
      },
      {
        "name": "getBarcodeTypeLengthRange",
        "signature": "(options: { type: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ type: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getbarcodetypelengthrange"
      },
      {
        "name": "getMsiChecksumType",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getmsichecksumtype"
      },
      {
        "name": "getCode39ChecksumType",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getcode39checksumtype"
      },
      {
        "name": "getCode11ChecksumType",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getcode11checksumtype"
      },
      {
        "name": "getEncodingCharacterSet",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getencodingcharacterset"
      },
      {
        "name": "getDecodingSpeed",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getdecodingspeed"
      },
      {
        "name": "getFormattingType",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getformattingtype"
      },
      {
        "name": "getThreadsLimit",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getthreadslimit"
      },
      {
        "name": "getMaximumResultsCount",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getmaximumresultscount"
      },
      {
        "name": "getDuplicatesDelayMs",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getduplicatesdelayms"
      },
      {
        "name": "isBarcodeTypeEnabled",
        "signature": "(options: { type: number; }) => Promise<any>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ type: number; }"
          }
        ],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "isbarcodetypeenabled"
      },
      {
        "name": "getMulticodeCachingEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getmulticodecachingenabled"
      },
      {
        "name": "getMulticodeCachingDuration",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getmulticodecachingduration"
      },
      {
        "name": "isUpcEanDeblurEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "isupceandeblurenabled"
      },
      {
        "name": "isMisshaped1DEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "ismisshaped1denabled"
      },
      {
        "name": "isBarcodeThumbnailOnResultEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "isbarcodethumbnailonresultenabled"
      },
      {
        "name": "getThresholdBetweenDuplicatesScans",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getthresholdbetweenduplicatesscans"
      },
      {
        "name": "isVINRestrictionsEnabled",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "isvinrestrictionsenabled"
      },
      {
        "name": "getBarkoderResolution",
        "signature": "() => Promise<any>",
        "parameters": [],
        "returns": "Promise<any>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getbarkoderresolution"
      }
    ],
    "properties": []
  },
  "interfaces": [],
  "enums": [],
  "typeAliases": [],
  "pluginConfigs": []
}